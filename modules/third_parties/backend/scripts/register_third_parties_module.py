"""
Script complet d'enregistrement du module Third Parties.

Ce script effectue toutes les op√©rations n√©cessaires pour enregistrer
le module Third Parties dans la base de donn√©es :
- Cr√©ation des permissions
- Cr√©ation des tables du module
- Enregistrement des widgets
- Cr√©ation des entr√©es de menu

Usage:
    python backend/scripts/register_third_parties_module.py
"""

import sys
from pathlib import Path

# Ajouter le r√©pertoire racine au path
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlmodel import Session, select, create_engine
from app.core.config import settings
from app.models import Permission, Menu, MenuItem
from app.models_dashboard import Widget
import json


# ============================================================================
# PERMISSIONS
# ============================================================================

THIRD_PARTIES_PERMISSIONS = [
    # Permissions Companies
    {
        "code": "companies.read",
        "name": "Voir les entreprises",
        "description": "Permet de consulter la liste et les d√©tails des entreprises tierces",
        "module": "third-parties",
        "category": "companies",
    },
    {
        "code": "companies.create",
        "name": "Cr√©er des entreprises",
        "description": "Permet de cr√©er de nouvelles entreprises tierces",
        "module": "third-parties",
        "category": "companies",
    },
    {
        "code": "companies.update",
        "name": "Modifier des entreprises",
        "description": "Permet de modifier les informations des entreprises tierces",
        "module": "third-parties",
        "category": "companies",
    },
    {
        "code": "companies.delete",
        "name": "Supprimer des entreprises",
        "description": "Permet de supprimer des entreprises tierces",
        "module": "third-parties",
        "category": "companies",
    },
    # Permissions Contacts
    {
        "code": "contacts.read",
        "name": "Voir les contacts",
        "description": "Permet de consulter la liste et les d√©tails des contacts",
        "module": "third-parties",
        "category": "contacts",
    },
    {
        "code": "contacts.create",
        "name": "Cr√©er des contacts",
        "description": "Permet de cr√©er de nouveaux contacts",
        "module": "third-parties",
        "category": "contacts",
    },
    {
        "code": "contacts.update",
        "name": "Modifier des contacts",
        "description": "Permet de modifier les informations des contacts",
        "module": "third-parties",
        "category": "contacts",
    },
    {
        "code": "contacts.delete",
        "name": "Supprimer des contacts",
        "description": "Permet de supprimer des contacts",
        "module": "third-parties",
        "category": "contacts",
    },
    # Permissions Invitations
    {
        "code": "contacts.invite",
        "name": "Inviter des contacts",
        "description": "Permet d'envoyer des invitations aux contacts pour cr√©er un compte",
        "module": "third-parties",
        "category": "invitations",
    },
    {
        "code": "contacts.manage_invitations",
        "name": "G√©rer les invitations",
        "description": "Permet de g√©rer (voir, r√©voquer) les invitations envoy√©es",
        "module": "third-parties",
        "category": "invitations",
    },
    {
        "code": "contacts.grant_admin",
        "name": "Donner les droits admin",
        "description": "Permet d'inviter des contacts avec des droits d'administrateur",
        "module": "third-parties",
        "category": "invitations",
    },
    # Permission g√©n√©rale du module
    {
        "code": "third_parties.admin",
        "name": "Administration Third Parties",
        "description": "Acc√®s administrateur complet au module Third Parties",
        "module": "third-parties",
        "category": "admin",
    },
]


# ============================================================================
# MENU
# ============================================================================

MENU_ITEMS = [
    {
        "key": "third-parties",
        "label": "Tiers",
        "icon": "building",
        "path": None,
        "order": 40,
        "parent_key": None,
        "is_active": True,
        "required_permission": "companies.read",
        "children": [
            {
                "key": "third-parties-companies",
                "label": "Entreprises",
                "icon": "building",
                "path": "/third-parties/companies",
                "order": 10,
                "is_active": True,
                "required_permission": "companies.read",
            },
            {
                "key": "third-parties-contacts",
                "label": "Contacts",
                "icon": "users",
                "path": "/third-parties/contacts",
                "order": 20,
                "is_active": True,
                "required_permission": "contacts.read",
            },
            {
                "key": "third-parties-invitations",
                "label": "Invitations",
                "icon": "mail",
                "path": "/third-parties/invitations",
                "order": 30,
                "is_active": True,
                "required_permission": "contacts.invite",
            },
        ],
    },
]


# ============================================================================
# FONCTIONS
# ============================================================================

def register_permissions(session: Session):
    """Enregistre les permissions"""
    print("\nüîí Enregistrement des permissions...")
    created = 0
    updated = 0

    for perm_data in THIRD_PARTIES_PERMISSIONS:
        existing = session.exec(
            select(Permission).where(Permission.code == perm_data["code"])
        ).first()

        if existing:
            print(f"  ‚ö†Ô∏è  Permission '{perm_data['code']}' existe d√©j√†, mise √† jour...")
            for key, value in perm_data.items():
                setattr(existing, key, value)
            updated += 1
        else:
            print(f"  ‚úÖ Cr√©ation de la permission '{perm_data['code']}'...")
            permission = Permission(**perm_data)
            session.add(permission)
            created += 1

    print(f"  ‚Üí {created} cr√©√©e(s), {updated} mise(s) √† jour")
    return created, updated


def register_widgets(session: Session):
    """Enregistre les widgets"""
    print("\nüìä Enregistrement des widgets...")

    widgets_file = Path("modules/third-parties/backend/widgets.json")
    if not widgets_file.exists():
        print("  ‚ö†Ô∏è  Fichier widgets.json non trouv√©, ignor√©")
        return 0, 0

    with open(widgets_file, 'r', encoding='utf-8') as f:
        widgets_data = json.load(f)

    created = 0
    updated = 0

    for widget_data in widgets_data:
        existing = session.exec(
            select(Widget).where(Widget.widget_type == widget_data["widget_type"])
        ).first()

        if existing:
            print(f"  ‚ö†Ô∏è  Widget '{widget_data['name']}' existe d√©j√†, mise √† jour...")
            for key, value in widget_data.items():
                setattr(existing, key, value)
            updated += 1
        else:
            print(f"  ‚úÖ Cr√©ation du widget '{widget_data['name']}'...")
            widget = Widget(**widget_data)
            session.add(widget)
            created += 1

    print(f"  ‚Üí {created} cr√©√©(s), {updated} mis √† jour")
    return created, updated


def register_menu_items(session: Session):
    """Enregistre les entr√©es de menu"""
    print("\nüìã Enregistrement des entr√©es de menu...")

    created = 0
    updated = 0

    def create_menu_item(item_data, parent_id=None):
        nonlocal created, updated

        children = item_data.pop("children", [])

        # V√©rifier si l'item existe d√©j√†
        existing = session.exec(
            select(MenuItem).where(MenuItem.key == item_data["key"])
        ).first()

        if existing:
            print(f"  ‚ö†Ô∏è  Menu '{item_data['label']}' existe d√©j√†, mise √† jour...")
            for key, value in item_data.items():
                setattr(existing, key, value)
            if parent_id:
                existing.parent_id = parent_id
            menu_item = existing
            updated += 1
        else:
            print(f"  ‚úÖ Cr√©ation du menu '{item_data['label']}'...")
            menu_item = MenuItem(**item_data, parent_id=parent_id)
            session.add(menu_item)
            created += 1

        # Flush pour obtenir l'ID
        session.flush()

        # Cr√©er les enfants
        for child_data in children:
            create_menu_item(child_data, menu_item.id)

    for menu_data in MENU_ITEMS:
        create_menu_item(menu_data)

    print(f"  ‚Üí {created} cr√©√©(s), {updated} mis √† jour")
    return created, updated


def create_tables():
    """Cr√©e les tables du module via Alembic"""
    print("\nüóÑÔ∏è  Cr√©ation des tables du module...")

    try:
        import subprocess
        result = subprocess.run(
            ["python", "backend/scripts/create_company_tables.py"],
            capture_output=True,
            text=True
        )

        if result.returncode == 0:
            print("  ‚úÖ Tables cr√©√©es avec succ√®s")
            return True
        else:
            print(f"  ‚ö†Ô∏è  Erreur lors de la cr√©ation des tables: {result.stderr}")
            return False
    except FileNotFoundError:
        print("  ‚ÑπÔ∏è  Script create_company_tables.py non trouv√©, tables peut-√™tre d√©j√† cr√©√©es")
        return True


# ============================================================================
# MAIN
# ============================================================================

def main():
    print("=" * 70)
    print("üöÄ ENREGISTREMENT DU MODULE THIRD PARTIES")
    print("=" * 70)

    engine = create_engine(str(settings.SQLALCHEMY_DATABASE_URI))

    # √âtape 1: Cr√©er les tables
    create_tables()

    # √âtape 2-4: Enregistrer dans la DB
    with Session(engine) as session:
        # Permissions
        perm_created, perm_updated = register_permissions(session)

        # Widgets
        widget_created, widget_updated = register_widgets(session)

        # Menu
        menu_created, menu_updated = register_menu_items(session)

        # Commit
        session.commit()

    # R√©sum√©
    print("\n" + "=" * 70)
    print("‚úÖ ENREGISTREMENT TERMIN√â")
    print("=" * 70)
    print(f"üìä Permissions  : {perm_created} cr√©√©es, {perm_updated} mises √† jour")
    print(f"üìà Widgets      : {widget_created} cr√©√©s, {widget_updated} mis √† jour")
    print(f"üìã Menu         : {menu_created} cr√©√©s, {menu_updated} mis √† jour")
    print("\nüí° Le module Third Parties est maintenant enregistr√© et pr√™t √† l'emploi!")
    print("=" * 70)


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
