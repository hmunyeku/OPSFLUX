/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as LayoutIndexRouteImport } from './routes/_layout/index'
import { Route as LayoutUsersRouteImport } from './routes/_layout/users'
import { Route as LayoutDashboardRouteImport } from './routes/_layout/dashboard'
import { Route as LayoutHseReportsNewRouteImport } from './routes/_layout/hse-reports.new'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutUsersRoute = LayoutUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutDashboardRoute = LayoutDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutHseReportsNewRoute = LayoutHseReportsNewRouteImport.update({
  id: '/hse-reports/new',
  path: '/hse-reports/new',
  getParentRoute: () => LayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/dashboard': typeof LayoutDashboardRoute
  '/users': typeof LayoutUsersRoute
  '/': typeof LayoutIndexRoute
  '/hse-reports/new': typeof LayoutHseReportsNewRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/dashboard': typeof LayoutDashboardRoute
  '/users': typeof LayoutUsersRoute
  '/': typeof LayoutIndexRoute
  '/hse-reports/new': typeof LayoutHseReportsNewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/_layout/dashboard': typeof LayoutDashboardRoute
  '/_layout/users': typeof LayoutUsersRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/hse-reports/new': typeof LayoutHseReportsNewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/dashboard' | '/users' | '/' | '/hse-reports/new'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/dashboard' | '/users' | '/' | '/hse-reports/new'
  id:
    | '__root__'
    | '/_layout'
    | '/login'
    | '/_layout/dashboard'
    | '/_layout/users'
    | '/_layout/'
    | '/_layout/hse-reports/new'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/users': {
      id: '/_layout/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof LayoutUsersRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/dashboard': {
      id: '/_layout/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof LayoutDashboardRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/hse-reports/new': {
      id: '/_layout/hse-reports/new'
      path: '/hse-reports/new'
      fullPath: '/hse-reports/new'
      preLoaderRoute: typeof LayoutHseReportsNewRouteImport
      parentRoute: typeof LayoutRoute
    }
  }
}

interface LayoutRouteChildren {
  LayoutDashboardRoute: typeof LayoutDashboardRoute
  LayoutUsersRoute: typeof LayoutUsersRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutHseReportsNewRoute: typeof LayoutHseReportsNewRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutDashboardRoute: LayoutDashboardRoute,
  LayoutUsersRoute: LayoutUsersRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutHseReportsNewRoute: LayoutHseReportsNewRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
