"""
Script de test pour v√©rifier le bon fonctionnement des hooks d'invitation
"""
import asyncio
import os
import sys
from uuid import uuid4

# Ajouter le chemin du r√©pertoire parent pour importer les modules de l'app
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from sqlmodel import Session, create_engine, select
from app.core.config import settings
from app.models_hooks import Hook, HookExecution
from app.core.hook_trigger_service import hook_trigger


async def create_test_hook(session: Session) -> Hook:
    """
    Cr√©e un hook de test pour l'√©v√©nement user.invitation.created
    """
    # Supprimer les anciens hooks de test
    statement = select(Hook).where(Hook.name == "Test Hook - Invitation Created")
    existing_hooks = session.exec(statement).all()
    for hook in existing_hooks:
        session.delete(hook)
    session.commit()

    # Cr√©er un nouveau hook de test
    test_hook = Hook(
        name="Test Hook - Invitation Created",
        description="Hook de test qui logue les invitations cr√©√©es",
        event="user.invitation.created",
        is_active=True,
        priority=10,
        conditions=None,  # Pas de conditions, toujours ex√©cut√©
        actions=[
            {
                "type": "send_email",
                "config": {
                    "email_to": "admin@opsflux.io",
                    "subject": "Test Hook - Nouvelle invitation",
                    "html_content": "<h1>Hook d√©clench√©!</h1><p>Une nouvelle invitation a √©t√© cr√©√©e.</p>"
                }
            }
        ]
    )

    session.add(test_hook)
    session.commit()
    session.refresh(test_hook)

    print(f"‚úÖ Hook de test cr√©√©: {test_hook.id}")
    return test_hook


async def test_hook_trigger(session: Session):
    """
    Teste le d√©clenchement d'un hook
    """
    print("\nüß™ Test du d√©clenchement de hook...")

    # Cr√©er un contexte de test
    context = {
        "invitation_id": str(uuid4()),
        "email": "test@example.com",
        "first_name": "John",
        "last_name": "Doe",
        "role_id": str(uuid4()),
        "invited_by_id": str(uuid4()),
        "invited_by_name": "Admin User",
        "expires_at": "2025-10-26T00:00:00Z",
        "expiry_days": 7,
    }

    # D√©clencher l'√©v√©nement
    executed_count = await hook_trigger.trigger_event(
        event="user.invitation.created",
        context=context,
        db=session,
    )

    print(f"‚úÖ Nombre de hooks ex√©cut√©s: {executed_count}")

    # V√©rifier les logs d'ex√©cution
    statement = select(HookExecution).order_by(HookExecution.created_at.desc()).limit(1)
    last_execution = session.exec(statement).first()

    if last_execution:
        print(f"\nüìä Derni√®re ex√©cution:")
        print(f"   - Hook ID: {last_execution.hook_id}")
        print(f"   - Succ√®s: {last_execution.success}")
        print(f"   - Dur√©e: {last_execution.duration_ms}ms")
        if last_execution.error_message:
            print(f"   - Erreur: {last_execution.error_message}")
    else:
        print("‚ùå Aucune ex√©cution trouv√©e")


async def test_hook_with_conditions(session: Session):
    """
    Teste un hook avec des conditions
    """
    print("\nüß™ Test d'un hook avec conditions...")

    # Cr√©er un hook qui ne se d√©clenche que pour un r√¥le sp√©cifique
    role_id = str(uuid4())

    conditional_hook = Hook(
        name="Test Hook - Conditional",
        description="Hook qui ne se d√©clenche que pour un r√¥le sp√©cifique",
        event="user.invitation.created",
        is_active=True,
        priority=5,
        conditions={
            "role_id": role_id
        },
        actions=[
            {
                "type": "send_email",
                "config": {
                    "email_to": "admin@opsflux.io",
                    "subject": "Hook conditionnel d√©clench√©",
                    "html_content": "<h1>Hook conditionnel d√©clench√©!</h1>"
                }
            }
        ]
    )

    session.add(conditional_hook)
    session.commit()
    session.refresh(conditional_hook)

    print(f"‚úÖ Hook conditionnel cr√©√©: {conditional_hook.id}")

    # Test 1: Contexte qui ne match pas la condition
    context_no_match = {
        "invitation_id": str(uuid4()),
        "email": "test1@example.com",
        "role_id": str(uuid4()),  # Diff√©rent du role_id du hook
        "invited_by_id": str(uuid4()),
        "invited_by_name": "Admin",
        "expires_at": "2025-10-26T00:00:00Z",
        "expiry_days": 7,
    }

    print("\n   Test 1: Contexte qui ne match pas la condition...")
    executed_count = await hook_trigger.trigger_event(
        event="user.invitation.created",
        context=context_no_match,
        db=session,
    )
    print(f"   R√©sultat: {executed_count} hook(s) ex√©cut√©(s) (attendu: 1, car le hook sans condition doit s'ex√©cuter)")

    # Test 2: Contexte qui match la condition
    context_match = {
        "invitation_id": str(uuid4()),
        "email": "test2@example.com",
        "role_id": role_id,  # M√™me role_id que le hook
        "invited_by_id": str(uuid4()),
        "invited_by_name": "Admin",
        "expires_at": "2025-10-26T00:00:00Z",
        "expiry_days": 7,
    }

    print("\n   Test 2: Contexte qui match la condition...")
    executed_count = await hook_trigger.trigger_event(
        event="user.invitation.created",
        context=context_match,
        db=session,
    )
    print(f"   R√©sultat: {executed_count} hook(s) ex√©cut√©(s) (attendu: 2, les deux hooks doivent s'ex√©cuter)")

    # Nettoyer
    session.delete(conditional_hook)
    session.commit()


async def main():
    """
    Fonction principale de test
    """
    print("=" * 60)
    print("üöÄ TEST DES HOOKS D'INVITATION")
    print("=" * 60)

    # Cr√©er une connexion √† la base de donn√©es
    engine = create_engine(str(settings.SQLALCHEMY_DATABASE_URI), echo=False)

    with Session(engine) as session:
        # Cr√©er un hook de test
        await create_test_hook(session)

        # Tester le d√©clenchement
        await test_hook_trigger(session)

        # Tester avec conditions
        await test_hook_with_conditions(session)

    print("\n" + "=" * 60)
    print("‚úÖ Tests termin√©s!")
    print("=" * 60)


if __name__ == "__main__":
    asyncio.run(main())
